{"ast":null,"code":"var _jsxFileName = \"/Users/jaysrees/TestArea/pwa_reactjs_testarea/my-app/src/jsx/CurrencyConverterTable.jsx\";\nimport React, { Component } from 'react';\nimport { CurrencyList } from '../conf/CurrencyMaster';\nimport RatesAPIClient from '../services/RatesAPIClient';\n\nclass CurrencyConverterTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ratesAPIClient = new RatesAPIClient();\n    this.state = {\n      baseCurrencyCode: \"-1\",\n      quoteCurrencyCode: \"-1\",\n      baseCurrencyValue: \"1\",\n      quoteCurrencyValue: \"\",\n      conversionRate: \"-1\",\n      whatChanged: \"\"\n    };\n    this.handleChangeBaseCurrency = this.handleChangeBaseCurrency.bind(this);\n    this.handleChangeQuoteCurrency = this.handleChangeQuoteCurrency.bind(this);\n    this.handleInputChangeBaseCurrencyValue = this.handleInputChangeBaseCurrencyValue.bind(this);\n    this.handleInputChangeQuoteCurrencyValue = this.handleInputChangeQuoteCurrencyValue.bind(this);\n  }\n\n  handleChangeBaseCurrency(event) {\n    this.setState({\n      baseCurrencyCode: event.target.value\n    });\n    this.setState({\n      whatChanged: 'BaseCurrency'\n    });\n    this.setConversionRate(event.target.value, this.state.baseCurrencyCode);\n    this.calcConversionAmount();\n  }\n\n  handleChangeQuoteCurrency(event) {\n    this.setState({\n      quoteCurrencyCode: event.target.value\n    });\n    this.setState({\n      whatChanged: 'QuoteCurrency'\n    });\n    this.setConversionRate(this.state.baseCurrencyCode, event.target.value);\n    this.calcConversionAmount();\n  }\n\n  handleInputChangeBaseCurrencyValue(event) {\n    this.setState({\n      baseCurrencyValue: event.target.value\n    });\n    this.setState({\n      whatChanged: 'BaseCurrencyValue'\n    });\n    this.calcConversionAmount();\n  }\n\n  handleInputChangeQuoteCurrencyValue(event) {\n    this.setState({\n      quoteCurrencyValue: event.target.value\n    });\n    this.setState({\n      whatChanged: 'QuoteCurrencyValue'\n    });\n    this.calcConversionAmount();\n  }\n\n  setConversionRate(baseCurrency, quoteCurrency) {\n    let conversionRate = \"-1\";\n\n    if (baseCurrency !== '-1' && quoteCurrency !== '-1') {\n      this.ratesAPIClient.getConversionRate(baseCurrency, quoteCurrency).then(convRate => {\n        this.setState({\n          conversionRate: convRate\n        });\n      });\n    }\n\n    console.log(\"Conversion rate in state\" + this.state.conversionRate);\n  }\n\n  setQuoteAmount() {\n    const conversionRate = this.state.conversionRate;\n\n    if (conversionRate !== '-1') {\n      const givenBaseCurrencyValue = this.state.baseCurrencyValue;\n\n      if (!isNaN(givenBaseCurrencyValue)) {\n        var quoteCcyValue = parseFloat(givenBaseCurrencyValue) * parseFloat(conversionRate);\n        this.setState({\n          quoteCurrencyValue: quoteCcyValue.toFixed(2)\n        });\n      } else {\n        this.setState({\n          baseCurrencyValue: \"\"\n        });\n      }\n    } else {\n      console.log(\"Conversion rate -1\");\n    }\n  }\n\n  setBaseAmount() {\n    const conversionRate = this.state.conversionRate;\n    let baseCcyValue = \"\";\n\n    if (conversionRate !== '-1') {\n      const givenQuoteCurrencyValue = this.state.quoteCurrencyValue;\n\n      if (!isNaN(givenQuoteCurrencyValue)) {\n        baseCcyValue = parseFloat(givenQuoteCurrencyValue) * (parseFloat(\"1\") / parseFloat(conversionRate));\n        this.setState({\n          baseCurrencyValue: baseCcyValue.toFixed(2)\n        });\n      } else {\n        this.setState({\n          quoteCurrencyValue: \"\"\n        });\n      }\n    }\n\n    return baseCcyValue;\n  }\n\n  calcConversionAmount() {\n    console.log(\"Conversion rate in state\" + this.state.conversionRate);\n    console.log(\"Base currency in state\" + this.state.baseCurrencyCode);\n    console.log(\"Quote currency in state\" + this.state.quoteCurrencyCode);\n    console.log(\"Base Value currency in state\" + this.state.baseCurrencyValue);\n    console.log(\"Quote Value currency in state\" + this.state.quoteCurrencyValue);\n    const whatChanged = this.state.whatChanged;\n\n    if (whatChanged == 'BaseCurrency' || whatChanged == 'QuoteCurrency') {\n      this.setQuoteAmount();\n    } else if (whatChanged == 'BaseCurrencyValue') {\n      this.setQuoteAmount();\n    } else if (whatChanged == 'QuoteCurrencyValue') {\n      this.setBaseAmount();\n    }\n  }\n\n  render() {\n    const whatChanged = this.state.whatChanged;\n\n    if (whatChanged == 'BaseCurrency' || whatChanged == 'QuoteCurrency') {\n      this.setQuoteAmount();\n    } else if (whatChanged == 'BaseCurrencyValue') {\n      this.setQuoteAmount();\n    } else if (whatChanged == 'QuoteCurrencyValue') {\n      this.setBaseAmount();\n    }\n\n    const baseCurrencyValue = this.state.baseCurrencyValue;\n    const quoteCurrencyValue = this.state.quoteCurrencyValue;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"currencyconvertertabel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"baseCurrency\",\n      value: baseCurrencyValue,\n      onChange: this.handleInputChangeBaseCurrencyValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      id: \"baseCurrencies\",\n      value: this.state.baseCurrencyCode,\n      onChange: this.handleChangeBaseCurrency,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 37\n      }\n    }, \"Select Currency\"), CurrencyList.map(currency => /*#__PURE__*/React.createElement(\"option\", {\n      value: currency.code,\n      key: currency.code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 41\n      }\n    }, currency.name)))))), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"quoteCurrency\",\n      value: quoteCurrencyValue,\n      onChange: this.handleInputChangeQuoteCurrencyValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      id: \"quoteCurrencies\",\n      value: this.state.quoteCurrencyCode,\n      onChange: this.handleChangeQuoteCurrency,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 37\n      }\n    }, \"Select Currency\"), CurrencyList.map(currency => /*#__PURE__*/React.createElement(\"option\", {\n      value: currency.code,\n      key: currency.code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 41\n      }\n    }, currency.name)))))))));\n  }\n\n}\n\nexport default CurrencyConverterTable;","map":{"version":3,"sources":["/Users/jaysrees/TestArea/pwa_reactjs_testarea/my-app/src/jsx/CurrencyConverterTable.jsx"],"names":["React","Component","CurrencyList","RatesAPIClient","CurrencyConverterTable","constructor","props","ratesAPIClient","state","baseCurrencyCode","quoteCurrencyCode","baseCurrencyValue","quoteCurrencyValue","conversionRate","whatChanged","handleChangeBaseCurrency","bind","handleChangeQuoteCurrency","handleInputChangeBaseCurrencyValue","handleInputChangeQuoteCurrencyValue","event","setState","target","value","setConversionRate","calcConversionAmount","baseCurrency","quoteCurrency","getConversionRate","then","convRate","console","log","setQuoteAmount","givenBaseCurrencyValue","isNaN","quoteCcyValue","parseFloat","toFixed","setBaseAmount","baseCcyValue","givenQuoteCurrencyValue","render","map","currency","code","name"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {CurrencyList} from '../conf/CurrencyMaster';\nimport RatesAPIClient from '../services/RatesAPIClient';             \n\nclass CurrencyConverterTable  extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.ratesAPIClient = new RatesAPIClient();\n        this.state = {\n            baseCurrencyCode:\"-1\",\n            quoteCurrencyCode:\"-1\",\n            baseCurrencyValue:\"1\",\n            quoteCurrencyValue:\"\",\n            conversionRate:\"-1\",\n            whatChanged:\"\"\n        };\n\n        this.handleChangeBaseCurrency = this.handleChangeBaseCurrency.bind(this);\n        this.handleChangeQuoteCurrency = this.handleChangeQuoteCurrency.bind(this);\n\n        this.handleInputChangeBaseCurrencyValue = this.handleInputChangeBaseCurrencyValue.bind(this);\n        this.handleInputChangeQuoteCurrencyValue = this.handleInputChangeQuoteCurrencyValue.bind(this);\n    }\n\n    handleChangeBaseCurrency(event) {\n        this.setState({baseCurrencyCode: event.target.value});\n        this.setState({whatChanged: 'BaseCurrency'});\n        this.setConversionRate(event.target.value,this.state.baseCurrencyCode);\n        this.calcConversionAmount()\n    }\n\n    handleChangeQuoteCurrency(event) {\n        this.setState({quoteCurrencyCode: event.target.value});\n        this.setState({whatChanged: 'QuoteCurrency'});\n        this.setConversionRate(this.state.baseCurrencyCode,event.target.value);\n        this.calcConversionAmount()\n    }\n\n    handleInputChangeBaseCurrencyValue(event){\n        this.setState({baseCurrencyValue: event.target.value});\n        this.setState({whatChanged: 'BaseCurrencyValue'});\n        this.calcConversionAmount()\n    }\n\n    handleInputChangeQuoteCurrencyValue(event){\n        this.setState({quoteCurrencyValue: event.target.value});\n        this.setState({whatChanged: 'QuoteCurrencyValue'});\n        this.calcConversionAmount()\n    }\n\n\n    setConversionRate(baseCurrency, quoteCurrency){\n        let conversionRate = \"-1\";\n\n        if(baseCurrency !== '-1' && quoteCurrency !== '-1'){\n            this.ratesAPIClient.getConversionRate(baseCurrency,quoteCurrency)\n            .then(convRate => {this.setState({conversionRate:convRate})}); \n        }\n        \n        console.log(\"Conversion rate in state\" + this.state.conversionRate);\n    \n    }\n\n   \n    setQuoteAmount(){\n        const conversionRate = this.state.conversionRate;\n        if(conversionRate !== '-1'){\n            const givenBaseCurrencyValue = this.state.baseCurrencyValue;\n\n            if(!isNaN(givenBaseCurrencyValue) ){\n                var quoteCcyValue = parseFloat(givenBaseCurrencyValue) * parseFloat(conversionRate);\n                this.setState({quoteCurrencyValue:quoteCcyValue.toFixed(2)}); \n            }else{\n                this.setState({baseCurrencyValue:\"\"}); \n            }\n        }else{\n            console.log(\"Conversion rate -1\");\n        }\n    }\n\n    setBaseAmount(){\n        const conversionRate = this.state.conversionRate;\n        let baseCcyValue =\"\";\n        if(conversionRate !== '-1'){\n           \n            const givenQuoteCurrencyValue = this.state.quoteCurrencyValue;\n\n            if( !isNaN(givenQuoteCurrencyValue)){\n                baseCcyValue = parseFloat(givenQuoteCurrencyValue) * (parseFloat(\"1\")/parseFloat(conversionRate)) ;\n                this.setState({baseCurrencyValue:baseCcyValue.toFixed(2)}); \n            }else{\n                this.setState({quoteCurrencyValue:\"\"}); \n            }\n        }\n\n        return baseCcyValue;\n    }\n\n    calcConversionAmount(){       \n        console.log(\"Conversion rate in state\" + this.state.conversionRate);\n        console.log(\"Base currency in state\" + this.state.baseCurrencyCode);\n        console.log(\"Quote currency in state\" + this.state.quoteCurrencyCode);\n        console.log(\"Base Value currency in state\" + this.state.baseCurrencyValue);\n        console.log(\"Quote Value currency in state\" + this.state.quoteCurrencyValue);\n\n        const whatChanged = this.state.whatChanged;\n        if(whatChanged == 'BaseCurrency' || whatChanged =='QuoteCurrency'){\n            this.setQuoteAmount();\n        } else if (whatChanged == 'BaseCurrencyValue'){\n            this.setQuoteAmount();\n        }else if(whatChanged =='QuoteCurrencyValue'){\n            this.setBaseAmount();\n        }\n    }\n\n\n    render(){\n\n        const whatChanged = this.state.whatChanged;\n        if(whatChanged == 'BaseCurrency' || whatChanged =='QuoteCurrency'){\n            this.setQuoteAmount();\n        } else if (whatChanged == 'BaseCurrencyValue'){\n            this.setQuoteAmount();\n        }else if(whatChanged =='QuoteCurrencyValue'){\n            this.setBaseAmount();\n        }\n\n        const baseCurrencyValue = this.state.baseCurrencyValue;\n        const quoteCurrencyValue = this.state.quoteCurrencyValue;\n    \n        return(\n            \n            <div id=\"currencyconvertertabel\">\n                <table>\n                    <tbody>\n                        <tr>\n                            <td><input id=\"baseCurrency\" value={baseCurrencyValue} onChange={this.handleInputChangeBaseCurrencyValue} /></td>\n                            <td></td>\n                            <td>\n                                <div>\n                                    <select id=\"baseCurrencies\" value={this.state.baseCurrencyCode} onChange={this.handleChangeBaseCurrency}>\n                                    <option value=\"-1\">Select Currency</option>\n                                    {\n                                        CurrencyList.map(currency => (\n                                        <option value={currency.code} key={currency.code}>\n                                            {currency.name}\n                                        </option>\n                                        ))\n                                    }\n                                    </select>\n                                    \n                                </div>\n                            </td>\n                        </tr>\n                        <tr></tr>\n                        <tr>\n                            <td><input id=\"quoteCurrency\" value={quoteCurrencyValue}  onChange={this.handleInputChangeQuoteCurrencyValue} /></td>\n                            <td></td>\n                            <td>\n                                <div>\n                                    <select id=\"quoteCurrencies\" value={this.state.quoteCurrencyCode} onChange={this.handleChangeQuoteCurrency}>\n                                    <option value=\"-1\">Select Currency</option>\n                                    {\n                                        CurrencyList.map(currency => (\n                                        <option value={currency.code} key={currency.code}>\n                                            {currency.name}\n                                        </option>\n                                        ))\n                                    }\n                                    </select>\n                                    \n                                </div>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n  }\n\n  export default CurrencyConverterTable;"]},"metadata":{},"sourceType":"module"}